@page "/reset-password"
@using System.Net
@using System.Text.RegularExpressions

<div class="ma-6 d-flex justify-center">
    <h3>Cambiar contraseña</h3>
</div>

<MudContainer MaxWidth="MaxWidth.ExtraSmall" Class="mt-8">
    <MudPaper Elevation="4" Class="pa-4">
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12">

                <MudForm @ref="form" @bind-IsValid="@success">
                    <MudTextField Label="Email" @bind-Value="_model.Email" ReadOnly Disabled />

                    <MudTextField Label="Token" @bind-Value="_model.ResetCode" ReadOnly Disabled />

                    <MudTextField T="string" Label="Nueva Contraseña" @bind-Value="_model.NewPassword"
                        InputType="@PasswordInput" Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                        Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon"
                        OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Mostrar contraseña"
                        RequiredError="Ingrese su contraseña!" />

                    <MudTextField T="string" Label="Repetir Contraseña" InputType="@PasswordInput" @ref="pwField1"
                                  Validation="@(new Func<string, string>(PasswordMatch))"
                                  Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon"
                                  OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Mostrar contraseña" />

                    <MudButton Variant="Variant.Filled" Color="Color.Primary"
                    Disabled="@(!success)" OnClick="HandleSubmit" Class="mt-4 ml-auto">
                        Restablecer
                    </MudButton>

                </MudForm>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "email")]
    public string? Email { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "token")]
    public string? Token { get; set; }

    [Inject] private IHttpClientFactory _httpFactory { get; set; }
    [Inject] private NavigationManager _navigationManager { get; set; }
    [Inject] private IToastService _toastService { get; set; }

    MudForm form;
    MudTextField<string> pwField1;
    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    ResetPasswordModel _model = new ResetPasswordModel();
    bool success;

    protected override async Task OnInitializedAsync()
    {
        // Lógica para leer la query string y asignar valores al modelo.
        var uri = new Uri(_navigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        _model.Email = Email;
        _model.ResetCode = Token;

        // Verificar el estado de autenticación
        var user = (await AuthState).User;
        if (user.Identity.IsAuthenticated)
        {
            _navigationManager.NavigateTo("/");
            return; 
        }

        await base.OnInitializedAsync();
    }

    private async Task HandleSubmit()
    {
        try
        {
            var httpClient = _httpFactory.CreateClient("API");
            var response = await httpClient.PostAsJsonAsync("/identity/resetPassword", _model);
            if (response.IsSuccessStatusCode)
            {
                _navigationManager.NavigateTo("/Accounts/Login");
            }
            else
            {
                var errorMessage = await HandleApiError.GetErrorMessage(response);
                _toastService.ShowError(errorMessage);
            }
        }
        catch (HttpRequestException ex)
        {
            _toastService.ShowError($"Error de conexión: {ex.Message}");
        }
        catch (Exception ex)
        {
            _toastService.ShowError($"Error interno inesperado: {ex.Message}");
        }
    }

    public class ResetPasswordModel
    {
        public string Email { get; set; }
        public string ResetCode { get; set; }
        public string NewPassword { get; set; }
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Es necesario ingresar una contraseña!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Las contraseñas deben tener minimo 8 caracteres de largo";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Las contraseñas deben tener al menos una letra mayúscula";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Las contraseñas deben tener al menos una letra minúscula";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Las contraseñas deben tener al menos un número";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Las contraseñas no coinciden...";
        return "";
    }

    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
}