@page "/Accounts/Login"

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using System.Text
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components
@using System.Net
@using WebClient.Shared.Providers
@using global::Shared.DTO
@using global::Shared.DTO.Token

<div class="ma-6 d-flex justify-center">
    <h3>LOGIN</h3>
</div>

<MudContainer MaxWidth="MaxWidth.ExtraSmall">
    <MudPaper Class="pa-4">
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12">

                <MudForm @ref="form" @bind-IsValid="@success">
                    <MudTextField T="string" Label="Usuario" @bind-Value="_model.User"
                    Required="true" RequiredError="Ingrese su Usuario/Email!"
                    Validation="@(new EmailAddressAttribute() {ErrorMessage = "El email es inválido"})"
                    InputType="InputType.Email"/>

                    <MudTextField T="string" Label="Contraseña" @bind-Value="_model.Password"
                    InputType="PasswordInput"
                    Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon"
                    OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Mostrar contraseña"
                    Required="true" RequiredError="Ingrese su contraseña!" />

                    <MudButton Variant="Variant.Filled"
                    Color="Color.Primary"
                    Disabled="@(!success)"
                    OnClick="@SignIn"
                    Class="mt-4 ml-auto">
                        Ingresar
                    </MudButton>

                    <MudText Typo="Typo.body2" Class="ml-2">
                        <MudLink Href="/forgot-password" Color="Color.Primary">¿Olvidaste tu contraseña?</MudLink>
                    </MudText>
                </MudForm>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    [Inject] private IHttpClientFactory _httpFactory { get; set; }
    [Inject] private NavigationManager navigationManager { get; set; }
    [Inject] private ILocalStorageService _localStorage { get; set; }
    [Inject] private AuthenticationStateProvider _auth { get; set; }
    [Inject] private IToastService _toastService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthState).User;
        if (user.Identity.IsAuthenticated) 
        {
            navigationManager.NavigateTo("/");
        }
        
        await base.OnInitializedAsync();
    }

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    bool success;
    string[] formErrors = Array.Empty<string>();
    MudForm form;
    LoginModelDto _model = new LoginModelDto();

    private async Task SignIn()
    {

        try
        {
            var httpClient = _httpFactory.CreateClient("API");
            var response = await httpClient.PostAsJsonAsync("api/Auth/login", _model);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<JwtTokenResponseDto>();

                if (result != null)
                {
                    await _localStorage.SetItemAsync("token", result.Token);
                    await _localStorage.SetItemAsync("refresh-token", result.RefreshToken);
                    await _localStorage.SetItemAsync("token-expiration", result.Expiration);

                    (_auth as CustomAuthProvider).NotifyAuthState();
                    navigationManager.NavigateTo("/");
                }
            }
            else
            {
                var errorMessage = await HandleApiError.GetErrorMessage(response);
                _toastService.ShowError(errorMessage);
            }
        }
        catch (HttpRequestException ex)
        {
            var statusMessage = ex.StatusCode switch
            {
                HttpStatusCode.NotFound => "Servidor no disponible",
                _ => "Error de conexión"
            };
            _toastService.ShowError($"{statusMessage}: {ex.Message}");
        }
        catch (Exception ex)
        {
            _toastService.ShowError($"Error interno inesperado: {ex.Message}");
        }
    }
    

    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
}
