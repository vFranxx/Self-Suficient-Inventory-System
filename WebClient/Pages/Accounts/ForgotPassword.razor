@page "/forgot-password"

@using MudBlazor
@using System.ComponentModel.DataAnnotations
@using System.Net

<div class="ma-6 d-flex justify-center">
    <h3>Recuperar contraseña</h3>
</div>

<MudContainer MaxWidth="MaxWidth.ExtraSmall" Class="mt-8">
    <MudPaper Class="pa-4">
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12">

                <MudForm @ref="form" @bind-IsValid="@success">
                    <MudTextField Label="Correo Electrónico"
                        @bind-Value="_model.Email"
                        Required="true" RequiredError="Ingrese su Email!"
                        Validation="@(new EmailAddressAttribute() {ErrorMessage = "El email es inválido"})"
                        InputType="InputType.Email" />

                    <MudButton Variant="Variant.Filled"
                        Color="Color.Primary"
                        Disabled="@(!success || isSubmitting)"
                        OnClick="HandleSubmit"
                        Class="mt-4">                        
                            Reestablecer
                    </MudButton>
                </MudForm>

                @if (isSubmitting)
                {
                    <div class="text-center mt-4">
                        <MudProgressCircular Color="Color.Success" Indeterminate="true" Size="Size.Small" />
                    </div>
                }
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    [Inject] private IHttpClientFactory _httpFactory { get; set; }
    [Inject] private IToastService _toastService { get; set; }
    [Inject] private NavigationManager _navigationManager { get; set; }

    private ForgotPasswordModel _model = new();
    private MudForm? form;
    private bool isSubmitting = false;
    private bool isSuccess = false;
    private string? errorMessage;
    bool success;

    protected override async Task OnInitializedAsync()
    {
        // Verificar el estado de autenticación
        var user = (await AuthState).User;
        if (user.Identity.IsAuthenticated)
        {
        _navigationManager.NavigateTo("/");
        return; 
        }

        await base.OnInitializedAsync();
    }

    private async Task HandleSubmit()
    {
        try
        {
            isSubmitting = true;

            var httpClient = _httpFactory.CreateClient("API");
            var response = await httpClient.PostAsJsonAsync("/identity/forgotPassword", _model);

            if (response.IsSuccessStatusCode)
            {
                _toastService.ShowSuccess("Revisa tu correo, en el recibirás un enlace para restablecer tu contraseña.");
                isSuccess = true;
            }
            else
            {
                var errorMessage = await HandleApiError.GetErrorMessage(response);
                _toastService.ShowError(errorMessage);
            }
        }
        catch (HttpRequestException ex)
        {
            var statusMessage = ex.StatusCode switch
            {
                HttpStatusCode.NotFound => "Servidor no disponible",
                _ => "Error de conexión"
            };
            _toastService.ShowError($"{statusMessage}: {ex.Message}");
        }
        catch (Exception ex)
        {
            _toastService.ShowError($"Error interno inesperado: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    public class ForgotPasswordModel
    {
        [Required(ErrorMessage = "El correo electrónico es requerido")]
        [EmailAddress(ErrorMessage = "Formato de correo electrónico inválido")]
        public string Email { get; set; } = string.Empty;
    }
}

