@page "/Accounts/Registration"

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using System.Text
@using WebClient.Shared
@using global::Shared.DTO
@using Microsoft.AspNetCore.Components

<div class="ma-6 d-flex justify-center">
    <h3>Formulario de registro</h3>
</div>

<MudContainer MaxWidth="MaxWidth.ExtraSmall" >
    <MudPaper Class="pa-4">
        <MudGrid Justify="Justify.Center" >
            <MudItem xs="12">

                <MudForm @ref="form" @bind-IsValid="@success">

                    <MudTextField T="string" Label="Email" @bind-Value="_model.Email"
                    Required="true" RequiredError="Ingrese su Email!"
                    Validation="@(new EmailAddressAttribute() {ErrorMessage = "El email es inválido"})"
                    InputType="InputType.Email" />

                    <MudTextField T="string" Label="Contraseña" @ref="pwField1" @bind-Value="_model.Password"
                    InputType="@PasswordInput"
                    Validation="@(new Func<string, IEnumerable<string>>(Validations.PasswordStrength))" Required="true"
                    Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon"
                    OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Mostrar contraseña"
                    RequiredError="Ingrese su contraseña!" />

                    <MudTextField T="string" Label="Repetir Contraseña" InputType="@PasswordInput"
                    @bind-Value="confirmPassword"
                    Validation="@((Func<string, IEnumerable<string>>)(arg => Validations.PasswordMatch(_model.Password, arg)))"
                    Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon"
                    OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Mostrar contraseña"/>

                    <MudButton Variant="Variant.Filled" 
                    Color="Color.Primary" 
                    Disabled="@(!success)" 
                    OnClick="@Register"
                    Class="mt-4 ml-auto">Registrar
                    </MudButton>
                </MudForm>
            </MudItem>

        </MudGrid>
    </MudPaper>
</MudContainer>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    [Inject] private NavigationManager navigationManager { get; set; }
    [Inject] private IHttpClientFactory _httpFactory { get; set; }
    [Inject] private IToastService _toastService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthState).User;
        if (user.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/");
        }

        await base.OnInitializedAsync();
    }

    private string confirmPassword;

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    bool success;
    MudTextField<string> pwField1;
    MudForm form;
    RegisterRequestDTO _model = new RegisterRequestDTO();

    private async Task Register()
    {
        try
        {
            var httpClient = _httpFactory.CreateClient("API");

            // Call API
            var response = await httpClient.PostAsJsonAsync("identity/register", _model);

            if (response.IsSuccessStatusCode)
            {
                _toastService.ShowSuccess("Operación existosa! Podras ingresar en cuanto seas dado de alta por un administrador");
                navigationManager.NavigateTo("/Accounts/Register/Confirmation");
                return;
            }
            else
            {
                var errorMessage = await HandleApiError.GetErrorMessage(response);
                _toastService.ShowError(errorMessage);
            }
        }
        catch (HttpRequestException ex)
        {
            _toastService.ShowError($"Error de conexión: {ex.Message}");
        }
        catch (Exception ex)
        {
            _toastService.ShowError("Error inesperado");
        }
    }

    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
}
