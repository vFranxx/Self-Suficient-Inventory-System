@using System.Security.Claims
@using WebClient.Shared.Providers
@using Blazored.LocalStorage
@using Blazored.Toast

@inherits LayoutComponentBase

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Style="background-color: #251899">

        <MudMenu Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" AriaLabel="Menú" Edge="Edge.Start">
            <!-- Opciones comunes para todos los usuarios -->
            <MudMenuItem Label="Home" Href="/" />

            <!-- Opciones para los ADMIN -->
            <AuthorizeView Roles="ADMIN">
                <Authorized>
                    <MudMenuItem Label="Gestión de usuarios" Href="/Manage" />
                </Authorized>
            </AuthorizeView>

            <!-- Opciones para los OPERADORES -->
            <AuthorizeView Roles="OPERADOR">
                <Authorized>

                </Authorized>
            </AuthorizeView>

            <!-- Opciones para los NO AUTORIZADOS -->
            <AuthorizeView>
                <NotAuthorized>
                    <MudMenuItem Label="About us" Href="" />
                </NotAuthorized>
            </AuthorizeView>
        </MudMenu>

        <MudLink Href="/" Style="display: contents;">
            <div style="position: absolute; left: -50px; transform: translate(50vw, 0);">
                <MudImage Src="/images/YPF-logo.png" Alt="YPF SERVICOMPRAS" Elevation="0" Class="rounded-lg"
                          Width="85" Style="filter: grayscale(100%) brightness(1000%);" />
            </div>
        </MudLink>
        
        <MudSpacer/>
        <AuthorizeView>
            <Authorized>                
                <MudMenu ActivationEvent="@MouseEvent.MouseOver">
                    <ActivatorContent>
                        <MudText Typo="Typo.subtitle1" Class="mr-3">
                            @DisplayUsername(context.User.Claims)
                        </MudText>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem Label="Perfil" Href="/Accounts/Settings"/>
                    </ChildContent>
                </MudMenu>

                <MudIconButton Icon="@Icons.Material.Filled.Logout"
                Color="Color.Inherit"
                OnClick="Logout" />
            </Authorized>

            <NotAuthorized>
                <MudIconButton Icon="@Icons.Custom.Brands.GitHub"
                Color="Color.Inherit"
                Href="https://github.com/vFranxx/Self-Suficient-Inventory-System"
                Target="_blank" />
            </NotAuthorized>
        </AuthorizeView>   

        <div>
            <BlazoredToasts Position="Blazored.Toast.Configuration.ToastPosition.TopRight"
                            Timeout="120"
                            SuccessClass="bg-success text-light"
                            ErrorClass="bg-danger text-light"
                            InfoClass="bg-info text-light"
                            WarningClass="bg-warning text-light" />
        </div>
        
    </MudAppBar>

    <MudMainContent>
        @Body
    </MudMainContent>

    
</MudLayout>

@code{
    [Inject] private IHttpClientFactory HttpFactory { get; set; }
    [Inject] private ISnackbar Snackbar { get; set; }

    [Inject] private NavigationManager Navigation { get; set; }
    [Inject] private ILocalStorageService LocalStorage { get; set; }
    [Inject] private AuthenticationStateProvider AuthStateProvider { get; set; }

    private string DisplayUsername(IEnumerable<Claim> claims) 
    {
        return claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value;
    }

    private async Task Logout()
    {
        var httpClient = HttpFactory.CreateClient("API");

        try
        {
            var response = await httpClient.PostAsync("/api/Auth/logout", null);
            if (!response.IsSuccessStatusCode)
            {
                Snackbar.Add($"Error al cerrar sesión: {response.ReasonPhrase}", Severity.Error);
                return;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error de conexión: {ex.Message}", Severity.Error);
        }
        finally 
        {
            await LocalStorage.RemoveItemAsync("token");
            await LocalStorage.RemoveItemAsync("refresh-token");
            await LocalStorage.RemoveItemAsync("token-expiration");
            (AuthStateProvider as CustomAuthProvider)?.NotifyAuthState();
            Navigation.NavigateTo("/", forceLoad: true);
        }   
    }
}
