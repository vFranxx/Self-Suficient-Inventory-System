@page "/ventas"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using BlazorFront.Services
@using BlazorFront.Models.Entities
@inject ProductService productService
@inject BillService billService
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime

<style>
    .product-card {
        transition: all 0.2s;
        cursor: pointer;
    }

        .product-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

    .cart-table td, .cart-table th {
        vertical-align: middle !important;
    }
</style>

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-lg-8">
            <div class="card shadow mb-4">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <span class="h5">Productos Disponibles</span>
                    <input type="text" class="form-control form-control-sm w-50" placeholder="Buscar producto..." @bind="searchTerm" />
                </div>
                <div class="card-body">
                    <div class="row row-cols-2 row-cols-md-3 g-3">
                        @foreach (var product in filteredProducts)
                        {
                            <div class="col">
                                <div class="card product-card h-100">
                                    <div class="card-body">
                                        <h6 class="card-title">@product.Descripcion</h6>
                                        <div class="d-flex justify-content-between align-items-center">
                                            <span class="badge bg-secondary">Stock: @product.Stock</span>
                                            <span class="h5 text-success">$@product.PrecioUnitario.ToString("N2")</span>
                                        </div>
                                    </div>
                                    <div class="card-footer bg-transparent">
                                        <button class="btn btn-sm btn-primary w-100" @onclick="() => AddToCart(product)">Agregar</button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <div class="card shadow sticky-top">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">Carrito de Ventas</h5>
                </div>
                <div class="card-body p-0">
                    <table class="table table-hover cart-table mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>Producto</th>
                                <th>Cant</th>
                                <th>Precio</th>
                                <th>Total</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in cartItems)
                            {
                                <tr>
                                    <td>@item.Product.Descripcion</td>
                                    <td>@item.Quantity</td>
                                    <td>$@item.Product.PrecioUnitario.ToString("N2")</td>
                                    <td>$@((item.Quantity * item.Product.PrecioUnitario).ToString("N2"))</td>
                                    <td>
                                        <button class="btn btn-sm btn-danger" @onclick="() => RemoveFromCart(item)">X</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="card-footer">
                    <div class="row mb-3">
                        <div class="col-6 fw-bold">Total:</div>
                        <div class="col-6 text-end fw-bold text-success">$@total.ToString("N2")</div>
                    </div>
                    <div class="d-grid gap-2">
                        <button class="btn btn-lg btn-success" @onclick="ProcessSale" disabled="@(cartItems.Count == 0)">Cobrar Venta</button>
                        <button class="btn btn-outline-danger" @onclick="CancelSale" disabled="@(cartItems.Count == 0)">Cancelar</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Product> products = new();
    private List<CartItem> cartItems = new();
    private string searchTerm = "";

    private decimal total => cartItems.Sum(i => i.Quantity * i.Product.PrecioUnitario);

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        products = await productService.GetProductsAsync();
    }

    private IEnumerable<Product> filteredProducts =>
        products.Where(p => p.Descripcion.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    private void AddToCart(Product product)
    {
        var existing = cartItems.FirstOrDefault(i => i.Product.ProdId == product.ProdId);
        if (existing != null)
        {
            existing.Quantity++;
        }
        else
        {
            cartItems.Add(new CartItem { Product = product, Quantity = 1 });
        }
    }

    private void RemoveFromCart(CartItem item) => cartItems.Remove(item);

    private void CancelSale()
    {
        cartItems.Clear();
    }

    private async Task ProcessSale()
    {
        if (cartItems.Count == 0)
        {
            await JsRuntime.InvokeVoidAsync("alert", "El carrito está vacío.");
            return;
        }

        var bill = new Bill
            {
                FechaHora = DateTime.Now,
                Total = total,
                IdOp = "1"
            };

        Console.WriteLine($"📤 Enviando Factura: {System.Text.Json.JsonSerializer.Serialize(bill)}");

        var createdBill = await billService.CreateBillAsync(bill);

        if (createdBill != null)
        {
            Console.WriteLine($"✅ Factura creada con ID: {createdBill.FacId}");

            foreach (var item in cartItems)
            {
                var billDetail = new BillDetail
                    {
                        IdFactura = createdBill.FacId,
                        IdProducto = item.Product.ProdId,
                        Cantidad = item.Quantity,
                        Precio = item.Product.PrecioUnitario,
                        Subtotal = item.Quantity * item.Product.PrecioUnitario
                    };

                await billService.CreateBillDetailAsync(billDetail);
            }

            cartItems.Clear();
            await JsRuntime.InvokeVoidAsync("alert", "Venta registrada con éxito.");
        }
        else
        {
            Console.WriteLine("❌ La API no devolvió una factura válida.");
            await JsRuntime.InvokeVoidAsync("alert", "Error al registrar la venta.");
        }
    }

    private class CartItem
    {
        public required Product Product { get; set; }
        public int Quantity { get; set; } = 1;
    }
}