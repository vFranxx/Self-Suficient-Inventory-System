@page "/Proveedores"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using BlazorFront.Models.Entities
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Gestión de Proveedores</h3>

@if (isLoading)
{
    <p>Cargando proveedores...</p>
}
else if (proveedores == null || !proveedores.Any())
{
    <p>No se encontraron proveedores.</p>
}
else
{
    <!-- Campo de busqueda -->
    <div class="mb-3">
        <input type="text" class="form-control" placeholder="Buscar proveedor..." @bind="searchQuery" />
    </div>

    <!-- Tabla de proveedores -->
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Referencia</th>
                <th>Contacto</th>
                <th>Email</th>
                <th>Dirección</th>
                <th>Precio</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var proveedor in proveedores.Where(p => p.Referencia.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)))
            {
                <tr>
                    <td>@proveedor.ProvId</td>
                    <td>@proveedor.Referencia</td>
                    <td>@proveedor.Contacto</td>
                    <td>@proveedor.Mail</td>
                    <td>@proveedor.Direccion</td>
                    <td>@proveedor.Precio</td> <!-- Precio agregado -->
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditarProveedor(proveedor)">Editar</button>
                        <button class="btn btn-danger" @onclick="() => EliminarProveedor(proveedor.ProvId)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Botón para agregar proveedor -->
    <button class="btn btn-success" @onclick="NuevoProveedor">Agregar Proveedor</button>

    <!-- Formulario de agregar/editar proveedor -->
    @if (proveedorSeleccionado != null)
    {
        <div class="mt-3">
            <EditForm Model="proveedorSeleccionado" OnValidSubmit="GuardarProveedor">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label>Referencia:</label>
                    <InputText @bind="proveedorSeleccionado.Referencia" class="form-control" />
                </div>
                <div class="mb-3">
                    <label>Contacto:</label>
                    <InputText @bind="proveedorSeleccionado.Contacto" class="form-control" />
                </div>
                <div class="mb-3">
                    <label>Email:</label>
                    <InputText @bind="proveedorSeleccionado.Mail" class="form-control" />
                </div>
                <div class="mb-3">
                    <label>Dirección:</label>
                    <InputText @bind="proveedorSeleccionado.Direccion" class="form-control" />
                </div>
                <div class="mb-3">
                    <label>Precio:</label>
                    <InputNumber @bind-Value="proveedorSeleccionado.Precio" class="form-control" />
                </div>

                <div class="mt-3">
                    <button type="submit" class="btn btn-primary">Guardar</button>
                    <button type="button" class="btn btn-secondary" @onclick="CancelarEdicion">Cancelar</button>
                </div>
            </EditForm>
        </div>
    }
}

@code {
    private List<Supplier> proveedores = new List<Supplier>();
    private Supplier proveedorSeleccionado;
    private string searchQuery = string.Empty;
    private bool isLoading = false;
    private string errorMessage;

    // Cargar los proveedores desde la API
    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            proveedores = await Http.GetFromJsonAsync<List<Supplier>>("api/proveedores") ?? new List<Supplier>();
            if (proveedores == null || !proveedores.Any())
            {
                errorMessage = "No se encontraron proveedores en la base de datos.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar proveedores: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    // Crear un nuevo proveedor
    private void NuevoProveedor()
    {
        proveedorSeleccionado = new Supplier { Referencia = "", Contacto = "", Mail = "", Direccion = "", Precio = 0 };
    }

    // Editar un proveedor existente
    private void EditarProveedor(Supplier proveedor)
    {
        proveedorSeleccionado = new Supplier
        {
            ProvId = proveedor.ProvId,
            Referencia = proveedor.Referencia,
            Contacto = proveedor.Contacto,
            Mail = proveedor.Mail,
            Direccion = proveedor.Direccion,
            Precio = proveedor.Precio
        };
    }

    // Guardar nuevo o editar proveedor
    private async Task GuardarProveedor()
    {
        try
        {
            if (proveedorSeleccionado.ProvId == 0)
            {
                await Http.PostAsJsonAsync("api/proveedores", proveedorSeleccionado);
            }
            else
            {
                await Http.PutAsJsonAsync($"api/proveedores/{proveedorSeleccionado.ProvId}", proveedorSeleccionado);
            }

            // Recargar la lista de proveedores
            proveedores = await Http.GetFromJsonAsync<List<Supplier>>("api/proveedores") ?? new List<Supplier>();
            proveedorSeleccionado = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al guardar proveedor: {ex.Message}";
        }
    }

    // Eliminar proveedor
    private async Task EliminarProveedor(int id)
    {
        try
        {
            await Http.DeleteAsync($"api/proveedores/{id}");
            proveedores = await Http.GetFromJsonAsync<List<Supplier>>("api/proveedores") ?? new List<Supplier>();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al eliminar proveedor: {ex.Message}";
        }
    }

    // Cancelar edicion
    private void CancelarEdicion()
    {
        proveedorSeleccionado = null;
    }
}
